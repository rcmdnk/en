<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Brew-file | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/en/blog/tags/brew-file/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/en/"/>
  <updated>2018-08-22T18:01:44+00:00</updated>
  <id>https://rcmdnk.com/en/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding additional file usage to Brew-file]]></title>
    <link href="https://rcmdnk.com/en/blog/2015/06/03/computer-brew-file-homebrew-mac/"/>
    <updated>2015-06-03T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/en/blog/2015/06/03/computer-brew-file-homebrew-mac</id>
    <content type="html"><![CDATA[<div class="amazon-img"><a href="http://www.amazon.com/o/ASIN/B00PUGKX2Y/rcmdnksblog-20/" rel="nofollow" target="_blank"><img src="https://images-fe.ssl-images-amazon.com/images/I/81R5LNqLdVL._SS200_.png" alt="File Manager" /></a></div>

<p>New Brewfile’s command <code>file</code> has been added
to <a href="https://rcmdnk.com/en/blog/tags/brew-file/">Brew-file</a>.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#file-commands" id="markdown-toc-file-commands">file commands</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="4042912847"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h1 id="file-commands">file commands</h1>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>In Brew-file for Brwefile management,
new command <code>file</code> has been added
as an Brewfile’s format.</p>

<p>In Brewfile, you can use <code>file</code> like:</p>

<figure class="code"><figcaption><span>Brwefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Additional files
</span><span class="line">file ~/.Brwefile
</span><span class="line">file ./${HOST}.Brewfile</span></code></pre></td></tr></table></div></figure>

<p>Then, Brew-file picks up settings in <strong>~/.Brewfile</strong> and <strong>./${HOST}.Brewfile</strong>, too.</p>

<p>In the path for additional files,
such <code>~</code> can be used as <code>$HOME</code>,
and any environmental variables, like <code>$HOST</code>, can be used.</p>

<p>If the path is relative, the path starts from the directory
in which the original Brewfile is stored.</p>

<p>If you have Brewfile in the original path,</p>

<pre><code>/usr/local/Library/Brewfile
</code></pre>

<p>then <strong>./${HOST}.Brewfile</strong> is</p>

<pre><code>/usr/local/Library/${HOST}.Brewfile
</code></pre>

<p>You can use <code>file</code> nesting, too.</p>

<p>There is another command, <code>brewfile</code>, which works exactly as same as <code>file</code>.</p>

<p>For example, if you want to divide Cask settings,
then write</p>

<pre><code>file ./Cask.Brewfile
</code></pre>

<p>in the main Brewfile, and prepare <strong>Cask.Brewfile</strong> with Cask settings.</p>

<p>If you want to use different settings for the different Mac,
such <strong>${HOST}.Brewfile</strong> is useful.</p>

<p>Or you can use <strong>~/.Brewfile</strong> in each Mac for special settings.</p>

<p>If the corresponding file is not found, Brew-file just ignores it.
Therefore, you can use same Brewfile in Mac, which has <strong>~/.Brewfile</strong>
and doesn’t have <strong>~/.Brewfile</strong>.</p>

<p>When a such <code>init</code> command is executed,
first Brew-file prepares a list of packages installed by Homebrew.</p>

<p>Next, check packages in the additional files,
and if the additional files have not installed packages,
they are deleted from the additional files.</p>

<p>On the other hand, packages listed in the additional files are removed from the list.</p>

<p>Then, the additional files are restored,
and remaining packages in the list are written out to main Brewfile.</p>

<p>To refer files used by Brew-file,
you can use new Brew-file command, <code>get_files</code>:</p>

<pre><code>$ brew file get_files
/usr/local/Library/rcmdnk_Brewfile/Brewfile
/usr/local/Library/rcmdnk_Brewfile/mymac.Brewfile
/Users/user/.Brewfile
</code></pre>

<p>Recent other updates:</p>

<blockquote>
  <p><a href="https://rcmdnk.com/en/blog/2015/05/15/computer-brew-file-homebrew-mac/">Brew-file update: completion, wrapper commands</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew-file update: completion, wrapper commands]]></title>
    <link href="https://rcmdnk.com/en/blog/2015/05/15/computer-brew-file-homebrew-mac/"/>
    <updated>2015-05-15T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/en/blog/2015/05/15/computer-brew-file-homebrew-mac</id>
    <content type="html"><![CDATA[<div class="amazon-img"><a href="http://www.amazon.com/o/ASIN/B00VU5HR1Y/rcmdnksblog-20/" rel="nofollow" target="_blank"><img src="https://images-fe.ssl-images-amazon.com/images/I/51eQpBDjdRL._SS200_.jpg" alt="The Completion " /></a></div>

<p><a href="https://github.com/rcmdnk/homebrew-file">Brew-file</a>
has been updated.</p>

<p>The new wrapper function allows you to use some subcommands of <code>brew-file</code>
directly as a <code>brew</code>’s subcommand.</p>

<p>Completion functions are also implemented for both Bash and Zsh.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#completion" id="markdown-toc-completion">Completion</a></li>
  <li><a href="#brew-wrap" id="markdown-toc-brew-wrap">brew-wrap</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="4042912847"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h1 id="completion">Completion</h1>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>There are new files of <a href="https://github.com/rcmdnk/homebrew-file/blob/master/etc/bash_completion.d/brew-file">etc/bash_completion.d/brew-file</a>
and
<a href="https://github.com/rcmdnk/homebrew-file/blob/master/share/zsh/site-functions/_brew-file">share/zsh/site-functions/_brew-file</a>.</p>

<p><strong>_brew-file</strong> is just a symbolic link to <strong>brew-file</strong>.</p>

<p>They have the functions of the completion for <code>brew-file</code> command.</p>

<p>To enable the completion, please add the following settings for each Bash or Zsh.</p>

<ul>
  <li>For Bash</li>
</ul>

<p>First, please install
<a href="http://bash-completion.alioth.debian.org/">Bash-Completion</a>
by:</p>

<pre><code>$ brew install bash-completion
</code></pre>

<p>Then, add following settings to your <strong>.bashrc</strong>:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="nv">brew_completion</span><span class="o">=</span><span class="k">$(</span>brew --prefix <span class="m">2</span>&gt;/dev/null<span class="k">)</span>/etc/bash_completion
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="m">0</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -f <span class="s2">&quot;</span><span class="nv">$brew_completion</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">source</span> <span class="nv">$brew_completion</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>For Zsh</li>
</ul>

<p>Add following settings in your <strong>.zshrc</strong>:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="nv">brew_completion</span><span class="o">=</span><span class="k">$(</span>brew --prefix <span class="m">2</span>&gt;/dev/null<span class="k">)</span>/share/zsh/zsh-site-functions
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="m">0</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -d <span class="s2">&quot;</span><span class="nv">$brew_completion</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nv">fpath</span><span class="o">=(</span><span class="nv">$brew_completion</span> <span class="nv">$fpath</span><span class="o">)</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line">autoload -U compinit
</span><span class="line">compinit
</span></code></pre></td></tr></table></div></figure>

<p>In case you have installed <a href="https://github.com/zsh-users/zsh-completions">zsh-completions</a>
 (can be installed by brew: <code>$ brew install zsh-completions</code>)、
settings can be like:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">for</span> d in <span class="s2">&quot;/share/zsh-completions&quot;</span> <span class="s2">&quot;/share/zsh/zsh-site-functions&quot;</span><span class="p">;</span><span class="k">do</span>
</span><span class="line">  <span class="nv">brew_completion</span><span class="o">=</span><span class="k">$(</span>brew --prefix <span class="m">2</span>&gt;/dev/null<span class="k">)</span><span class="nv">$d</span>
</span><span class="line">  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="m">0</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -d <span class="s2">&quot;</span><span class="nv">$brew_completion</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="nv">fpath</span><span class="o">=(</span><span class="nv">$brew_completion</span> <span class="nv">$fpath</span><span class="o">)</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">autoload -U compinit
</span><span class="line">compinit
</span></code></pre></td></tr></table></div></figure>

<p>to enable both <strong>zsh-completions</strong>  and <strong>site-functions</strong>.</p>

<h1 id="brew-wrap">brew-wrap</h1>

<p>The above completion is done only for <code>brew-file</code> command.
It doesn’t complete such <code>brew file</code> (<code>brew</code> + <code>file</code> subcommand).</p>

<p><a href="https://github.com/rcmdnk/homebrew-file/blob/master/etc/brew-wrap">etc/brew-wrap</a>
has a wrapper setting to override original <code>brew</code> completion.
It adds <code>file</code> subcommand to <code>brew</code>, and enable a completion
for <code>brew file</code> as same as <code>brew-file</code>.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="c1"># wrap brew (brew-wrap in brew-file)</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -f <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/brew-wrap <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">source</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/brew-wrap
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p>This file should be read after above completion settings, like</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="c1"># Bash completion</span>
</span><span class="line"><span class="nv">brew_completion</span><span class="o">=</span><span class="k">$(</span>brew --prefix <span class="m">2</span>&gt;/dev/null<span class="k">)</span>/etc/bash_completion
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="m">0</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -f <span class="s2">&quot;</span><span class="nv">$brew_completion</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">source</span> <span class="nv">$brew_completion</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line">
</span><span class="line"><span class="c1"># wrap brew (brew-wrap in brew-file)</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -f <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/brew-wrap <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">source</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/brew-wrap
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>brew-wrap</code> wraps <code>brew</code> command itself
to automatically update Brewfile after such <code>brew install</code> or <code>brew uninstall</code>.</p>

<p>Moreover, some subcommands of <code>brew-file</code>
can be used directly as a <code>brew</code>’s subcommand,
if the command is not in originally <code>brew</code>’s subcommands.</p>

<p>Such <code>init</code> or <code>casklist</code> are not in <code>brew</code>’s subcommands.
Therefore</p>

<pre><code>$ brew init
</code></pre>

<p>becomes as same as</p>

<pre><code>$ brew file init
</code></pre>

<p>and</p>

<pre><code>$ brew casklist
</code></pre>

<p>can be used as</p>

<pre><code>$ brew file casklist
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew-file: Manager for packages of Homebrew]]></title>
    <link href="https://rcmdnk.com/en/blog/2014/11/15/computer-mac-homebrew/"/>
    <updated>2014-11-15T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/en/blog/2014/11/15/computer-mac-homebrew</id>
    <content type="html"><![CDATA[<div class="amazon-img"><a href="http://www.amazon.com/o/ASIN/B00746Z6RK/rcmdnksblog-20/" rel="nofollow" target="_blank"><img src="https://images-fe.ssl-images-amazon.com/images/I/51gy9VdYCeL._SS200_.jpg" alt="Apple MacBook Air MD760LL/B 13.3-Inch Laptop (NEWEST VERSION)" /></a></div>

<p>I’m managing Mac’s packages with
<a href="https://github.com/Homebrew/homebrew">Homebrew</a>.</p>

<p>To keep own update history or share the settings to other Mac,
it is very useful to make a list of packages.</p>

<p>For this purpose,
I have developed <a href="https://github.com/rcmdnk/homebrew-file">Bew-file</a>,
which is an extension of Homebrew.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#what-is-brew-file" id="markdown-toc-what-is-brew-file">What is Brew-file?</a></li>
  <li><a href="#install" id="markdown-toc-install">Install</a></li>
  <li><a href="#usage" id="markdown-toc-usage">Usage</a>    <ul>
      <li><a href="#brew-file-commands" id="markdown-toc-brew-file-commands">brew file commands</a></li>
      <li><a href="#brewfile" id="markdown-toc-brewfile">Brewfile</a></li>
      <li><a href="#set-github-repository" id="markdown-toc-set-github-repository">Set GitHub Repository</a></li>
      <li><a href="#install-packages" id="markdown-toc-install-packages">Install packages</a></li>
      <li><a href="#initialize-brewfile" id="markdown-toc-initialize-brewfile">Initialize Brewfile</a></li>
      <li><a href="#check-applications-for-cask" id="markdown-toc-check-applications-for-cask">Check applications for Cask</a></li>
      <li><a href="#update-brewfile" id="markdown-toc-update-brewfile">Update Brewfile</a></li>
      <li><a href="#edit-brewfile" id="markdown-toc-edit-brewfile">Edit Brewfile</a></li>
      <li><a href="#brew-wrap" id="markdown-toc-brew-wrap">brew-wrap</a></li>
    </ul>
  </li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="4042912847"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h1 id="what-is-brew-file">What is Brew-file?</h1>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>Brew-file was made inspired by <a href="https://github.com/andrew/brewdler">Brewdler</a>,
which uses <strong>Brewfile</strong>, a list of packages and applications, to install at once.
Brewdler was implemented into Homebrew, but it became obsolete.</p>

<p><a href="https://github.com/rcmdnk/homebrew-file">Bew-file</a> uses <strong>Brewfile</strong> too.
It can also make and update from installed packages.
In addition, it has a function to manage <strong>Brewfile</strong> in a GitHub repository,
so that you can keep a history of your installation,
and easily share the same setting to another Mac.</p>

<h1 id="install">Install</h1>

<p>You can install Brew-file by Homebrew like:</p>

<pre><code>$ brew install rcmdnk/file/brew-file
</code></pre>

<p>If you haven’t installed Homebrew,
you can install Homebrew and Brew-file together by:</p>

<pre><code>$ curl -fsSL https://raw.github.com/rcmdnk/homebrew-file/install/install.sh |sh
</code></pre>

<p>Then, you became able to use <code>brew file</code> command.
Try <code>brew file help</code> for the basic usage.</p>

<p>If you have installed
<a href="https://github.com/caskroom/homebrew-cask">homebrew-cask</a>
for an application management,
you can manage these applications by <code>brew file</code>, too.
You can even install homebrew-cask by <code>brew file</code>, of course.</p>

<h1 id="usage">Usage</h1>

<h2 id="brew-file-commands">brew file commands</h2>

<p>Here are basic commands of <code>brew file</code>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Command</th>
      <th style="text-align: left">Function</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">install</td>
      <td style="text-align: left">Install packages in Brewfile (do ‘brew update’, too).</td>
    </tr>
    <tr>
      <td style="text-align: center">init (or -i)</td>
      <td style="text-align: left">Initialize/Update Brewfile with installed packages.</td>
    </tr>
    <tr>
      <td style="text-align: center">et_repo (or -s)</td>
      <td style="text-align: left">Set BBrewfile repository.</td>
    </tr>
    <tr>
      <td style="text-align: center">clean (or -c)</td>
      <td style="text-align: left">Clean up packages not listed in Brewfile. This runs as dry-run by default. Use <code>-C</code> to enforce cleanup.</td>
    </tr>
    <tr>
      <td style="text-align: center">pull</td>
      <td style="text-align: left">Update Brwefile from the repository (if it is set).</td>
    </tr>
    <tr>
      <td style="text-align: center">push</td>
      <td style="text-align: left">Push Brewfile to the repository (if it is set).</td>
    </tr>
    <tr>
      <td style="text-align: center">edit (or -e)</td>
      <td style="text-align: left">Edit Brewfile (by vim or $EDITOR if it is set).</td>
    </tr>
    <tr>
      <td style="text-align: center">casklist</td>
      <td style="text-align: left">Check applications for Cask.</td>
    </tr>
    <tr>
      <td style="text-align: center">help (or -h)</td>
      <td style="text-align: left">Show help</td>
    </tr>
  </tbody>
</table>

<p>For more information, see <code>brew file help</code> or
<a href="https://github.com/rcmdnk/homebrew-file/blob/master/README.md">README</a>.</p>

<h2 id="brewfile">Brewfile</h2>

<p><strong>Brewfile</strong> is a core part of Brew-file.
This file is normally located in <strong>/usr/local/Library/Brewfile</strong>.</p>

<p>This can be changed by <code>-f</code> option,
or set it in your setting file (such <strong>.bashrc</strong>) like:</p>

<pre><code>$ export HOMEBREW_BREWFILE=~/.brewfile
</code></pre>

<p>A basic <strong>Brewfile</strong> is like this:</p>

<figure class="code"><figcaption><span>Brewfile</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="c1"># tap repositories and their packages</span>
</span><span class="line">
</span><span class="line"><span class="c1">## caskroom/cask</span>
</span><span class="line">tap caskroom/cask
</span><span class="line">install brew-cask
</span><span class="line">cask install adobe-reader
</span><span class="line">
</span><span class="line"><span class="c1">## rcmdnk/file</span>
</span><span class="line">tap rcmdnk/file
</span><span class="line">install brew-file
</span><span class="line">
</span><span class="line"><span class="c1"># Other Homebrew packages</span>
</span><span class="line">install git
</span><span class="line">install vim --HEAD --with-lua
</span><span class="line">
</span><span class="line"><span class="c1"># App Store applications</span>
</span><span class="line">appstore GarageBand
</span><span class="line">appstore iMovie
</span></code></pre></td></tr></table></div></figure>

<p>The format is <code>command &lt;package&gt; [&lt;options&gt;]</code> for each line.
The line starting with <code>#</code> is comment line.</p>

<p>Available commands in Brewfile are as follows:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Command</th>
      <th style="text-align: left">Function</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>install &lt;package&gt; [&lt;options&gt;]</code></td>
      <td style="text-align: left">Execute <code>brew install &lt;package&gt; [&lt;options&gt;]</code>. You can give options after package name as command line.</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>brew &lt;package&gt; [&lt;options&gt;]</code></td>
      <td style="text-align: left">Same as <code>install</code>, for the compatibility with Brewdler.</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>brew install &lt;package&gt; [&lt;options&gt;]</code></td>
      <td style="text-align: left">Same as <code>install</code>.</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>tap &lt;repository&gt;</code></td>
      <td style="text-align: left">Execute <code>brew tap &lt;repository&gt;</code>.</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>tapall &lt;repository&gt;</code></td>
      <td style="text-align: left">Execute <code>brew tap &lt;repository&gt;</code>. In addition, execute <code>brew install</code> for all formulae in the tap.</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>cask &lt;app&gt;</code></td>
      <td style="text-align: left">Execute <code>brew cask install &lt;app&gt;</code>, by using <a href="https://github.com/caskroom/homebrew-cask">Homebrew-cask</a>. If the first argument is <code>install</code>, it is ignored. (<code>cask package</code> and <code>cask install package</code> work in the same way.)</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>cask install &lt;app&gt;</code></td>
      <td style="text-align: left">Same as <code>cask &lt;app&gt;</code></td>
    </tr>
    <tr>
      <td style="text-align: center"><code>pip &lt;package&gt;</code></td>
      <td style="text-align: left">execute <code>brew pip &lt;package&gt;</code>, by using <a href="https://github.com/hanxue/brew-pip">brew-pip</a>. (Note: brew-pip seems obsolete.)</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>appstore &lt;app&gt;</code></td>
      <td style="text-align: left">Just show <code>Please install &lt;app&gt; from App Store!</code></td>
    </tr>
    <tr>
      <td style="text-align: center"><code>before &lt;cmd&gt;</code></td>
      <td style="text-align: left">Execute <code>&lt;cmd&gt;</code> before any other commands. (e.g.: You can write such <code>before sudo softwareupdate -i -a</code> for system update.)</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>after &lt;cmd&gt;</code></td>
      <td style="text-align: left">Execute <code>&lt;cmd&gt;</code> after any other commands.</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>Other any words: &lt;cmd&gt;</code></td>
      <td style="text-align: left">Just Execute <code>&lt;cmd&gt;</code>, after any other commands other than after commands. <code>after</code> and <code>before</code> commands are kept at initialization or update, while these other commands are not kept.</td>
    </tr>
  </tbody>
</table>

<h2 id="set-github-repository">Set GitHub Repository</h2>

<p>Brew-file can use Brewfile in the repository on GitHub.</p>

<p>To set the repository, do</p>

<pre><code>$ brew file set_repo
Set repository, "non" for local Brewfile,
&lt;user&gt;/&lt;repo&gt; for github repository,
or full path for the repository:
</code></pre>

<p>You will be asked a path of the repository, then give like
<a href="https://github.com/rcmdnk/Brewfile">rcmdnk/Brewfile</a>.</p>

<p>If the repository doesn’t exist, it proceeds to the procedure making the repository.</p>

<p>Then, you can <code>pull</code>/<code>push</code> the repository by <code>brew file pull</code>/<code>brew file push</code>, respectively.</p>

<h2 id="install-packages">Install packages</h2>

<p>If you already have Brewfile, you can install packages and applications
in Brewfile, by:</p>

<pre><code>$ brew file install
</code></pre>

<p>It is very powerful when you setup Mac for the first time.</p>

<p><img alt="warning" src="https://rcmdnk.com/en/images/emoji/unicode/26a0.png" class="emoji" /> For applications of App Store,
<code>brew file install</code> just shows messages prompting you to install
these applications from App Store.
(Currently I don’t have any way to install App Store applications
from command line…)</p>

<h2 id="initialize-brewfile">Initialize Brewfile</h2>

<p>For the first time, you can make Brewfile from installed packages.
Just do:</p>

<pre><code>$ brew file init
</code></pre>

<h2 id="check-applications-for-cask">Check applications for Cask</h2>

<p>You may have installed many applications directly
other than Homebrew-Cask or App Store.</p>

<p>These applications can be installed by Homebreww-cask.</p>

<p><code>brew file casklist</code> will make <strong>Caskfile</strong> in the current directory.</p>

<p><code>brew file casklist</code> searches applications in
<strong>/Applications</strong>, <strong>/Applications/Utilities</strong>,
<strong>~/Applications</strong>, <strong>~/Applications/Utilities</strong>,
and make a list of:</p>

<ul>
  <li>Apps installed by Cask.</li>
  <li>Apps installed directly instead of by Cask.</li>
  <li>Apps installed but no casks are available.</li>
</ul>

<p>For applications, <strong>Apps installed directly instead of by Cask</strong>,
it is good to remove them, and add the result in Caskfile
to Brewfile, then install these applications by <code>brew file install</code>.
So that you can easily manage these applications by Brew-file.</p>

<h2 id="update-brewfile">Update Brewfile</h2>

<p><code>brew file update</code> does <code>pull</code>/<code>brew update</code>/<code>install</code>/<code>brew upgrade</code>/<code>initialize</code>/<code>push</code>/<code>clean</code>.</p>

<p>You can easily synchronize two Macs by doing <code>brew file update</code>
in each Mac.
It is useful if you set <code>brew file update</code> in cronjob or launchd
to execute once a day.</p>

<h2 id="edit-brewfile">Edit Brewfile</h2>

<p>If you want to edit Brewfile directly, you can use <code>brew file edit</code>
to open and edit Brewfile.</p>

<p>A default editor is Vim.
<code>$EDITOR</code> variable is used as editor if it is set.</p>

<h2 id="brew-wrap">brew-wrap</h2>

<p>When you execute such <code>brew install</code>,
Brewfile is not updated.
You need to execute <code>brew file init</code> or <code>brew file update</code>
to update Brewfile.</p>

<p>If you want to automate it,
<a href="https://github.com/rcmdnk/homebrew-file/blob/master/etc/brew-wrap">etc/brew-wrap</a>
is available.</p>

<p>This file has a wrapper function of <code>brew</code>
in which <code>brew file initialize</code> is automatically executed
after such <code>brew install</code> command.</p>

<p>To enable this wrapper function,
source this file in your setting file such <strong>.bashrc</strong>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="o">[</span> -f <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/brew-wrap <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">source</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/brew-wrap
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This <code>brew</code> wrapper function executes original <code>brew</code>
if <code>brew file</code> command is not available
so that you can safely uninstall/re-install brew-file.</p>

]]></content>
  </entry>
  
</feed>
